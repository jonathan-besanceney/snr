database_helpers:
  postgres:
    env:
      PGPASSWORD: '$password'
    dump_command: [
      '/usr/bin/pg_dump',
      '--host=$host',
      '--port=$port',
      '--username=$username',
      '--clean',
      '--if-exists',
      '--dbname=$dbname'
      ]
    restore_command: [
      '/usr/bin/psql',
      '--host=$host',
      '--port=$port',
      '--username=$username',
      '$dbname'
    ]
    list_database_command: [
      '/usr/bin/psql',
      '--host=$host',
      '--port=$port',
      '--username=$username',
      '--tuples-only',
      '--command=SELECT datname FROM pg_database WHERE datname NOT IN (''postgres'', ''template1'', ''template0'');'
    ]
    create_database_command: [
      '/usr/bin/psql',
      '--host=$host',
      '--port=$port',
      '--username=$username',
      '--command=CREATE DATABASE $dbname WITH OWNER = postgres ENCODING = ''UTF8'' CONNECTION LIMIT = -1;'
    ]
    create_user_and_assign_command: [
      '/usr/bin/psql',
      '--host=$host',
      '--port=$port',
      '--username=$username',
      '--command=DO
      $do$
      BEGIN
        IF NOT EXISTS (
          SELECT
          FROM   pg_catalog.pg_roles
          WHERE  rolname = ''$user''
        ) THEN
          CREATE USER "$user" WITH LOGIN NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;
          ALTER USER "$user" PASSWORD ''$passwd'';
        END IF;
      END
      $do$;
      ALTER DATABASE $dbname OWNER TO "$user";'
    ]
  mysql:
    env:
      MYSQL_PWD: '$password'
    dump_command: [
      '/usr/bin/mysqldump',
      '--host=$host',
      '--port=$port',
      '--user=$username',
      '--default-character-set=utf8',
      '$dbname'
      ]
    restore_command: [
      '/usr/bin/mysql',
      '--host=$host',
      '--port=$port',
      '--user=$username',
      '$dbname'
    ]
    list_database_command: [
      '/usr/bin/mysql',
      '--host=$host',
      '--port=$port',
      '--user=$username',
      '--execute=SELECT schema_name
        FROM information_schema.schemata
        WHERE schema_name NOT IN (''information_schema'', ''mysql'', ''performance_schema'', ''sys'');',
      '--batch',
      '--silent'
    ]
    create_database_command: [
      '/usr/bin/mysql',
      '--host=$host',
      '--port=$port',
      '--user=$username',
      '--execute=CREATE DATABASE $dbname CHARACTER SET utf8 COLLATE utf8_general_ci;'
    ]
    create_user_and_assign_command: [
      '/usr/bin/mysql',
      '--host=$host',
      '--port=$port',
      '--user=$username',
      '--execute=CREATE USER IF NOT EXISTS ''$user'' IDENTIFIED BY ''$passwd'';
        GRANT ALL PRIVILEGES ON $dbname.* TO ''$user'';
      '
    ]

compression_helpers:
  compressed_extention: tar.lzo
  #compressed_from_pipe_ext: lzo
  compressed_from_pipe_ext: xz
  compress_env:
    XZ_OPT: '-0 --threads=5'
    LZOP: '--fast'
  compress_command: [
    '/bin/tar',
    '--create',
    '--lzop',
    '--exclude=*.socket',
    '--exclude=socket',
    '--file',
    '$destination',
    '$file'
  ]
  compress_from_pipe: [
    #'/usr/bin/lzop'
    '/usr/bin/xz'
  ]
  decompress_command: [
    '/bin/tar',
    'xaf',
    '$file'
  ]
  decompress_to_pipe: [
    #'/usr/bin/lzop',
    #'-dc',
    '/usr/bin/xzcat',
    '$file'
  ]
  compress_info_command: [
    '/usr/bin/lzop',
    '-l',
    '$file'
  ]
  compress_info_command_output: {
    'data_line': -1,
    'compressed_size_index': 1,
    'uncompressed_size_index': 2,
    'ratio_index': 3
  }
  compress_from_pipe_info: [
    '/usr/bin/xz',
    '--robot',
    '--list',
    '$file'
  ]
  compress_from_pipe_info_output: {
    'data_line': -1,
    'compressed_size_index': 3,
    'uncompressed_size_index': 4,
    'ratio_index': 5
  }


databases:
  - instance: pg_instance
    type: postgres
    host: 192.168.1.x
    port: 5432
    credentials: /root/.snr/pg_root
  - instance: my_instance
    type: mysql
    host: 192.168.1.x
    port: 3306
    credentials: /root/.snr/.my_root

apps:
  - name: seafile
    databases:
      - name: ccnet
        databaseName: ccnet-db
        instance: my_instance
      - name: seafile
        databaseName: seafile-db
        instance: my_instance
      - name: seahub
        databaseName: seahub-db
        instance: my_instance
    files:
        - name: data
          hostPath: /mnt/data/volumes/seafile/data
  - name: seafile-test-restore
    databases:
      - name: ccnet
        databaseName: restore-ccnet
        instance: my_instance
      - name: seafile
        databaseName: restore-seafile
        instance: my_instance
      - name: seahub
        databaseName: restore-seahub
        instance: my_instance
    files:
      - name: data
        hostPath: /mnt/data/volumes/restore/seafile/data
  - name: gitlab
    databases:
      - name: gitlab
        databaseName: gitlab
        instance: pg_instance
    files:
      - name: data
        hostPath: /mnt/data/volumes/gitlab/data
  - name: gitlab-test-restore
    databases:
      - name: gitlab
        databasePrefix: restore_
        databaseName: gitlab
        instance: pg_instance
        credentials: /root/.snr/gitlab
    files:
      - name: data
        hostPath: /mnt/data/volumes/restore/gitlab

saves:
  - app_name: seafile
    destination: '/mnt/saves/$app/$type/$name/$name-$date'
    retention:
      databases: database_standard
      files: file_standard
    schedules:
      - every: 1
        interval: day
        at: "00:00"
  - app_name: gitlab
    destination: '/mnt/saves/$app/$type/$name/$name-$date'
    retention:
      databases: database_standard
      files: file_standard
    schedules:
      - every: 1
        interval: day
        at: "00:00"
  - app_name: seafile-test-restore
    destination: '/mnt/saves/seafile/$type/$name/$name-$date'
    allowed_actions:
      - restore
      #  save
  - app_name: gitlab-test-restore
    destination: '/mnt/saves/gitlab/$type/$name/$name-$date'
    allowed_actions:
      - restore
      #  save

retention:
  - name: database_standard
    days: 5
    week: 3
    month: 1
    quarter: 1
    year: 1
  - name: file_standard
    days: 1
    week: -1
    month: -1
    quarter: -1
    year: -1

log_path: /var/log/snr
logging:
  version: 1
  disable_existing_loggers: False
  formatters:
    simple:
        format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

  handlers:
    console:
      class: logging.StreamHandler
      level: DEBUG
      formatter: simple
      stream: ext://sys.stdout

    info_file_handler:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: simple
      filename: info.log
      maxBytes: 10485760 # 10MB
      backupCount: 20
      encoding: utf8

    error_file_handler:
      class: logging.handlers.RotatingFileHandler
      level: ERROR
      formatter: simple
      filename: errors.log
      maxBytes: 10485760 # 10MB
      backupCount: 20
      encoding: utf8

  root:
    level: INFO
    handlers: [console, info_file_handler, error_file_handler]
